
AVRASM ver. 1.56  E:\Program Files\AVR Studio\AvrStudio4\HCore\TEST04\TEST04.asm Fri Apr 11 15:25:14 2003


         
         ;********************************************************************************
         ;***
         ;***  Een implementatie voor aansturing van de UART.
         ;***    Ervan uitgaand dat onze AVR op een clockfrequentie van 7.3728MHz draait.
         ;***
         ;********************************************************************************
         
         
          .include "8535def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"8535def.inc"
         ;* Title				:Register/Bit Definitions for the AT90S8535
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.com
         ;* Target MCU			:AT90S8535
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8535
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	MCUSR	=$34
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	USR		=$0b
          .equ	UCR		=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
         
         
         ;***** Bit Definitions
         ;MCUSR
          .equ	EXTRF	=1
          .equ	PORF	=0
         
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ	OCIE2	=7
          .equ	TOIE2	=6
          .equ	TICIE1	=5
          .equ	OCIE1A	=4
          .equ	OCIE1B	=3
          .equ	TOIE1	=2
          .equ	TOIE0	=0
         
         ;TIFR
          .equ	OCF2	=7
          .equ	TOV2	=6
          .equ	ICF1	=5
          .equ	OCF1A	=4
          .equ	OCF1B	=3
          .equ	TOV1	=2
          .equ	TOV0	=0
         
         ;MCUCR
          .equ	SE		=6
          .equ	SM1		=5
          .equ	SM0		=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	PWM2	=6
          .equ	COM21	=5
          .equ	COM20	=4
          .equ	CTC2	=3
          .equ	CS22	=2
          .equ	CS21	=1
          .equ	CS20	=0
         
         ;ASSR
          .equ	AS2		=3
          .equ	TCN2UB	=2
          .equ	OCR2UB	=1
          .equ	TCR2UB	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE		=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ	EERIE	=3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7		=7
          .equ	PA6		=6
          .equ	PA5		=5
          .equ	PA4		=4
          .equ	PA3		=3
          .equ	PA2		=2
          .equ	PA1		=1
          .equ	PA0		=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7		=7
          .equ	PB6		=6
          .equ	PB5		=5
          .equ	PB4		=4
          .equ	PB3		=3
          .equ	PB2		=2
          .equ	PB1		=1
          .equ	PB0		=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7		=7
          .equ	PC6		=6
          .equ	PC5		=5
          .equ	PC4		=4
          .equ	PC3		=3
          .equ	PC2		=2
          .equ	PC1		=1
          .equ	PC0		=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7		=7
          .equ	PD6		=6
          .equ	PD5		=5
          .equ	PD4		=4
          .equ	PD3		=3
          .equ	PD2		=2
          .equ	PD1		=1
          .equ	PD0		=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE		=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
         
         ;USR
          .equ	RXC		=7
          .equ	TXC		=6
          .equ	UDRE	=5
          .equ	FE		=4
          .equ	OR		=3
         
         ;RXCIE
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;ACSR
          .equ	ACD		=7
          .equ	ACO		=5
          .equ	ACI		=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ	MUX2	=2
          .equ	MUX1	=1
          .equ	MUX0	=0
         
         ;ADCSR
          .equ	ADEN	=7
          .equ	ADSC	=6
          .equ	ADFR	=5
          .equ	ADIF	=4
          .equ	ADIE	=3
          .equ	ADPS2	=2
          .equ	ADPS1	=1
          .equ	ADPS0	=0
         
          .def	XL		=r26
          .def	XH		=r27
          .def	YL		=r28
          .def	YH		=r29
          .def	ZL		=r30
          .def	ZH		=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM location
          .equ	XRAMEND =$25F
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	OC2addr =$003	;Timer2 compare match Vector Address
          .equ	OVF2addr=$004	;Timer2 overflow Vector Address
          .equ	ICP1addr=$005	;Timer1 Input Capture Vector Address
          .equ	OC1Aaddr=$006	;Timer1 Output Compare A Interrupt Vector Address
          .equ	OC1Baddr=$007	;Timer1 Output Compare B Interrupt Vector Address
          .equ	OVF1addr=$008	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00A	;SPI Interrupt Vector Address
          .equ	URXCaddr=$00B	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00C	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00D	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00E	;ADC Conversion Complete Interrupt Vector Address
          .equ	ERDYaddr=$00F	;EEPROM Write Complete Interrupt Vector Address
          .equ	ACIaddr =$010	;Analog Comparator Interrupt Vector Address
         
         ; Mijn constanten
          .def temp		= R17					; Een register voor algemeen gebruik
          .def tempL		= R18					; Een register voor algemeen gebruik
          .def lastRead	= R19					; De laatst gelezen/ontvangen byte van de UART
         
         
         
         
         
         ; Het begin van het CODE-segment
          .cseg
         ;--- De vector-tabel -------------------
          .org 0x0000								; Het begin van de vector-tabel op adres 0 van het RAM
000000 c022      	rjmp RESET							; Reset Handler
000001 9518      	reti								;External Interrupt0 Vector Address
000002 9518      	reti								;External Interrupt1 Vector Address
000003 9518      	reti								;Timer2 compare match Vector Address
000004 9518      	reti								;Timer2 overflow Vector Address
000005 9518      	reti								;Timer1 Input Capture Vector Address
000006 c00b      	rjmp Timer_Interrupt_CompareA		;Timer1 Output Compare A Interrupt Vector Address
000007 9518      	reti								;Timer1 Output Compare B Interrupt Vector Address
000008 c008      	rjmp Timer_Interrupt_Overflow		;Overflow1 Interrupt Vector Address
000009 9518      	reti								;Overflow0 Interrupt Vector Address
00000a 9518      	reti								;SPI Interrupt Vector Address
00000b c007      	rjmp UART_Rx_Interrupt				;UART Receive Complete Interrupt Vector Address
00000c 9518      	reti								;UART Data Register Empty Interrupt Vector Address
00000d 9518      	reti								;UART Transmit Complete Interrupt Vector Address
00000e 9518      	reti								;ADC Conversion Complete Interrupt Vector Address
00000f 9518      	reti								;EEPROM Write Complete Interrupt Vector Address
000010 9518      	reti								;Analog Comparator Interrupt Vector Address
         ;---------------------------------------
         
         
         
         
         
         ;------------------------------------------
         ;--- De Timer1-Overflow Interrupt-Handler
         ;------------------------------------------
          Timer_Interrupt_Overflow:
000011 9518      	reti
         
         
         
         ;------------------------------------------
         ;--- De Timer1-Compare-A Interrupt-Handler
         ;------------------------------------------
          Timer_Interrupt_CompareA:
000012 9518      	reti
         
         
         
         
         
         
         
         
         
         
         ;------------------------------------------
         ;--- De UART Receive Interrupt-Handler
         ;------------------------------------------
          UART_Rx_Interrupt:
000013 931f      	push	temp
         	
000014 b13c      	in		lastRead, UDR
         	;mov	temp, lastRead
         	;rcall	transmit
         
         	; Timer1-CompareA waarde instellen (PWM puls breedte)
000015 e010      	ldi		temp, $00
000016 2f23      	mov		tempL, lastRead
000017 bd1b      	out		OCR1AH, temp
000018 bd2a      	out		OCR1AL, tempL
         
000019 911f      	pop		temp
00001a 9518      	reti
         
         
         
         ;------------------------------------------
         ;--- Initialiseer de UART. (subroutine)
         ;---
         ;--- De te gebruiken baudrate moet tevoren
         ;--- in register 'temp' worden aangereikt.
         ;------------------------------------------
          UART_Initialize:
00001b b919      	out		UBRR, temp
         	;Schakel de receiver, transmitter & TXCint in
00001c e918      	ldi		temp, (1<<RXEN) | (1<<TXEN) | (1<<RXCIE)
00001d b91a      	out		UCR, temp
00001e 9508      	ret
         
         
         
         ;------------------------------------------
         ;--- UART: Verzend een byte. (subroutine)
         ;---
         ;--- De te verzenden byte tevoren in
         ;--- register 'temp' laden.
         ;------------------------------------------
          UART_transmit:
         	; Klaar om te verzenden ??
00001f 9b5d      	sbis	USR, UDRE
000020 cffe      	rjmp	UART_transmit
000021 b91c      	out		UDR, temp
000022 9508      	ret
         
         
         
         
         
         
         
         
         
         ;------------------------------------------
         ;--- Het begin van de programma uitvoer.
         ;------------------------------------------
          RESET:
         	; De stack-pointer instellen op het einde van het RAM
000023 e012      	ldi		temp, high(RAMEND)
000024 e52f      	ldi		tempL, low(RAMEND)
000025 bf1e      	out		SPH, temp
000026 bf2d      	out		SPL, tempL
         
         
         
         	;--- De 16-bit timer1 op PWM-mode instellen ---------------------------------------------------------
         	; Port D pin 5 (OC1A) op output instellen, want deze pin zal het PWM-signaal leveren.
000027 b311      	in		temp, DDRD
         	;andi	temp, 0b11011111
000028 6210      	ori		temp, (1<<PIND5)
000029 bb11      	out		DDRD, temp
         
         	; Bij 10-bits PWM loopt de Timer1 op Clock/2046 = 7.324MHz / 2046 = 3579.6676Hz
00002a b51f      	in		temp, TCCR1A				;
00002b 731c      	andi	temp, 0b00111100			;
00002c 6011      	ori		temp, (1<<PWM10)			; 8-bits PWM  (max.counter waarde => $FF)
00002d 6c10      	ori		temp, (1<<COM1A0 | 1<<COM1A1)	; toggle output pin (PD5) bij elke timer-interrupt (inverted PWM)
00002e bd1f      	out		TCCR1A, temp
         
         	; De te gebruiken timer-clock instellen
00002f b51e      	in		temp, TCCR1B				; bits[0..2] bepalen de gebruikte timer-clock
000030 7f18      	andi	temp, 0b11111000			;
000031 6015      	ori		temp, (1<<CS22 | 1<<CS20)	; bits[0..2] instellen op Clock/1024
000032 bd1e      	out		TCCR1B, temp
         
         	; De 16-bit counter instellen over 2 8-bit registers.
         	; De hoogste teller-waarde met 8-bit PWM is $FF; Deze waarde representeerd een 100% PWM duty-cycle.
000033 e010      	ldi		temp, $00
000034 ef2f      	ldi		tempL, $FF
000035 bd1d      	out		TCNT1H, temp
000036 bd2c      	out		TCNT1L, tempL
         
         	; De 16-bit compare-registers instellen op een 50% PWM duty-cycle
         	; Voor een 50% PWM duty-cycle gebruiken we de helft van deze waarde $FF.
         	; Als er een compare-IRQ plaatstvindt, kan pin PD5 ge-toggled worden (indien zo ingesteld)
000037 e010      	ldi		temp, $00
000038 e820      	ldi		tempL, $80
000039 bd1b      	out		OCR1AH, temp
00003a bd2a      	out		OCR1AL, tempL
         
         	; De Timer1-Overflow inschakelen,
         	; In PWM-mode wordt deze IRQ gegenereerd als de timer (up/down)PWM-telling door $0000 gaat met tellen.
         	; De Timer1-CompareA inschakelen,
         	; Een compare-IRQ vindt plaats als de timer-PWM-telling gelijk is aan de waarde in het OCR1A regsiter.
00003b b718      	in		temp, TIFR					; Het Timer-Interrupt-Flag-Register aanspreken
00003c 7e1b      	andi	temp, 0b11101011			; alleen bits 2 & 4 aanpassen
00003d 6014      	ori		temp, (1<<TOV1)				; bit 2 zetten (TOV1 - Timer1-Overflow)
00003e 6110      	ori		temp, (1<<OCF1A)			; bit 4 aanzetten (OCF1A - Timer1-CompareA)
00003f bf18      	out		TIFR, temp
         
         	; Het Timer-Interrupt-Mask-Register instellen
000040 b719      	in		temp, TIMSK					; Het Timer-Interrupt-Mask-Register aanspreken
000041 7e1b      	andi	temp, 0b11101011			; alleen bits 2 & 4 aanpassen
000042 6014      	ori		temp, (1<<TOIE1)			; bit 2 zetten (TOIE1 - Timer1-Overflow-Interrupt-Enabled)
000043 6110      	ori		temp, (1<<OCIE1A)			; bit 4 aanzetten (OCIE1A - Timer1-compareA-Interrupt-Enabled)
000044 bf19      	out		TIMSK, temp
         
         
         
         
         
         	; De baudrate instellen op 19200@7.3728MHz  met een afwijking van 0.0%
000045 e117      	ldi		temp, 23
000046 dfd4      	rcall	UART_Initialize
         
         
         
         
         	; globale interrupts inschakelen
000047 9478      	sei
         
         	; Een eeuwige lus....
          eloop:
000048 cfff      	rjmp eloop
         

Assembly complete with no errors.
