;-------------------------------------------------------------------
;--- Een DCC-Zender voor de trein-modelbouw
;---
;---	Output op Pin D6 op de AT90S8535
;---	CK = 7.372800 MHz
;---	TCK = CK /8, dus een timertick per microseconde
;---	DCC protocol: "1" duur tussen 52us - 64us, "0" duur tussen 90us - 10000us (10ms)
;---	(Het verschil in dutycycle tussen perioden A & B, mag niet zijn > 6us)
;---	De tijd tussen 2 packets moet zijn >= 5 ms.
;---
;---	          __    __
;---	         |  |  |  |  |
;---	         |pB|  |  |  |
;---	------+--+  +--+  +--+
;---	      .pA.  .  .  .  .      pA = periode A
;---	      .  .  .  .  .  .      pB = periode B
;---	      ....  ....  ....	     . = signaal door booster gemaakt
;---
;---	         *     *     *       * = verwerk periode A
;---	      #     #     #          # = verwerk periode B
;---
;---
;--- BitStream in SRAM: '0'=0-bit, '1'=1-bit, '*'=ongeldige bit, ' '=pulsduur te lang/packet-end
;---
;-------------------------------------------------------------------


;--- INCLUDE FILES --------------------\
;.nolist
.include "8535def.inc"					; AVR AT90S8535
;.list
;--------------------------------------/




;--- COMPILER DIRECTIVES --------------\
.equ Output_To_COM 		= 0				; ontvangen bits uitvoeren naar de COM: poort
.equ Output_To_LED 		= 1				; ontvangen bits uitvoeren naar de LED's
.equ Save_To_Bitstream	= 1				; ontvangen bits bewaren als een stream in SRAM
;--------------------------------------/




;--- CONSTANTEN -----------------------\
.equ CK 			= 7372800			; CPU clock frequentie	; 7372800
.equ TCK 			= CK/8				; timer1 frequentie		; CK/8
.equ Min1 			= 0.000052 * TCK	; duur van een (halve/positieve) bit (in timerticks)
.equ Max1 			= 0.000064 * TCK
.equ Min0 			= 0.000090 * TCK
.equ Max0 			= 0.010000 * TCK
.equ TimeOutValue	= 0.018 * TCK		; 18 milliseconden
; connecties met AVR
.equ CaptureDDR		= DDRD
.equ CapturePort	= PORTD
.equ CaptureIn		= PIND
.equ CapturePin		= PD6
; LED's
.equ LED_DDR		= DDRC
.equ LED_Port		= PORTC
.equ LED_Error		= PC7
.equ LED_Bit		= PC6
; strings/chars
.equ CHR_0			= '0'
.equ CHR_1			= '1'
.equ CHR_Error		= '*'
.equ CHR_Timeout	= ' '
;--------------------------------------/




;--- REGISTER ALIASSEN ----------------\
.def temp			= R16				; Een register voor algemeen gebruik
.def temp2			= R17				; nog 1..
.def StreamCount	= R18				; aantal bytes in de BitStream
;.def XL								; pointer naar te schrijven adres in BitStream
;.def XH
;.def YL								; bitduur in timerticks voor periode A
;.def YH
;.def ZL								; bitduur in timerticks voor periode B
;.def ZH
;--------------------------------------/



;--- Variablelen in SRAM --------------\
.DSEG
.equ StreamMax = 100
BitStream:	.BYTE StreamMax					; 100 bytes data voor de bitstream (1 byte per bit)
;--------------------------------------/


;--- De AVR-AT90S8535 "vector"-tabel --\
.CSEG
.org $0000								; Het begin van de vector-tabel op adres 0 van het RAM
	rjmp RESET							; Reset Handler
	reti								; External Interrupt0 Vector Address
	reti								; External Interrupt1 Vector Address
	reti								; Timer2 compare match Vector Address
	reti								; Timer2 overflow Vector Address
	reti								; Timer1 Input Capture Vector Address
	rjmp Timer_Interrupt_CompareA		; Timer1 Output Compare A Interrupt Vector Address
	reti								; Timer1 Output Compare B Interrupt Vector Address
	reti								; Overflow1 Interrupt Vector Address
	reti								; Overflow0 Interrupt Vector Address
	reti								; SPI Interrupt Vector Address
	reti								; UART Receive Complete Interrupt Vector Address
	reti								; UART Data Register Empty Interrupt Vector Address
	reti								; UART Transmit Complete Interrupt Vector Address
	reti								; ADC Conversion Complete Interrupt Vector Address
	reti								; EEPROM Write Complete Interrupt Vector Address
	reti								; Analog Comparator Interrupt Vector Address
;--------------------------------------/





;--- INCLUDE FILES --------------------\
.include "RS232.asm"					; UART routines
;--------------------------------------/




;---------------------------------------
;--- MACRO's
;--------------------------------------\
; De stack-pointer instellen op het einde van het RAM
.MACRO initStackPointer
	ldi		temp2, high(RAMEND)
	ldi		temp, low(RAMEND)
	out		SPH, temp2
	out		SPL, temp
.ENDMACRO

.MACRO WaitFor1
	; wacht op de volgende omhooggaande flank..
_0:	sbis	CaptureIn, CapturePin		;
	rjmp	_0
.ENDMACRO

.MACRO ResetCounter
	; de counter op 0 instellen
	clr		temp
	out		TCNT1H, temp
	out		TCNT1L, temp
.ENDMACRO

.MACRO WaitFor0
	; wacht op de volgende omlaaggaande flank..
_0:	sbic	CaptureIn, CapturePin		;
	rjmp	_0
.ENDMACRO

.MACRO ReadCounter;(Dutycycle_LOW, Dutycycle_HIGH : register)
	; de timercounter uitlezen in register "Dutycycle"
	in		@0, TCNT1L
	in		@1, TCNT1H
.ENDMACRO


;--- Macro TestPeriode
.MACRO TestPeriode;(Dutycycle_LOW, Dutycycle_HIGH : register)
	; test of de bit geldig is; dwz:   (# betekent ongeldig)
	;
	; #####|      1      |##########|      0      |#####
	;      ^             ^          ^             ^
	;      Min1          Max1       Min0          Max0
	;

	; Dutycycle < Min1 ?
	cpi		@0, low(Min1)
	ldi		temp, high(Min1)
	cpc		@1, temp
	brlo	_2							; bit ongeldig
	; Dutycycle <= Max1 ?
	cpi		@0, low(Max1+1)
	ldi		temp, high(Max1+1)
	cpc		@1, temp
	brlo	_1							; geldige "1"
	; Dutycycle < Min0 ?
	cpi		@0, low(Min0)
	ldi		temp, high(Min0)
	cpc		@1, temp
	brlo	_2							; bit ongeldig
	; Dutycycle <= Max0 ?
	cpi		@0, low(Max0+1)
	ldi		temp, high(Max0+1)
	cpc		@1, temp
	brlo	_0							; geldige "0"
_2:	;ongeldige bit
	.ifdef Output_To_LED
		LED_On LED_Error				; Error LED aan (ongeldig)
		LED_Off LED_Bit					; Bit LED uit
	.endif
	.ifdef Output_To_COM
		ldi		temp, CHR_Error
		rcall	UART_transmit
	.endif
	.ifdef Save_To_Bitstream
		ldi		temp, CHR_Error
		PushBit temp
	.endif
	rjmp	_3
_0:	; een geldige "0"
	.ifdef Output_To_LED
		LED_Off LED_Error				; Error LED uit (geldig)
		LED_Off LED_Bit					; Bit LED uit ("0")
	.endif
	.ifdef Output_To_COM
		ldi		temp, CHR_0
		rcall	UART_transmit
	.endif
	.ifdef Save_To_Bitstream
		ldi		temp, CHR_0
		PushBit temp
	.endif
	rjmp	_3
_1:	; een geldige "1"
	.ifdef Output_To_LED
		LED_Off LED_Error				; Error LED uit (geldig)
		LED_On LED_Bit					; Bit LED aan ("1")
	.endif
	.ifdef Output_To_COM
		ldi		temp, CHR_1
		rcall	UART_transmit
	.endif
	.ifdef Save_To_Bitstream
		ldi		temp, CHR_1
		PushBit temp
	.endif
_3:	
.ENDMACRO

.MACRO LED_Off;(LED)
	cbi		LED_Port, @0				; LED uit
.ENDMACRO

.MACRO LED_On;(LED)
	sbi		LED_Port, @0				; LED aan
.ENDMACRO

.MACRO PushBit;(Bit)
	cpi	StreamCount, StreamMax				; zit de buffer al vol?
	breq	_0						; ja? dan klaar..
	inc	StreamCount					; anders teller aantal bytes in buffer verhogen
	; X verwijst naar het volgende te schrijven adres in de BitStream-buffer..
	st		X+, @0						; [X] := @0,  X++
_0:
.ENDMACRO

.MACRO ResetStream
	ldi		XL, low(BitStream)
	ldi		XH, high(BitStream)
.ENDMACRO
;--------------------------------------/





;---------------------------------------
;--- De LED poorten instellen
;--------------------------------------\
LED_Initialize:
	sbi		LED_DDR, LED_Error			; output
	LED_Off LED_Error					; Error LED uit
	sbi		LED_DDR, LED_Bit			; output
	LED_Off LED_Bit						; Bit LED uit
	ret
;---------------------------------------


;---------------------------------------
;--- De Capture pin instellen
;--------------------------------------\
Capture_Initialize:
	cbi		CaptureDDR, CapturePin		; "input capture" pin
	cbi		CapturePORT, CapturePin		; tri-state
	ret
;--------------------------------------/


;---------------------------------------
;--- De Bitstream (schrijf-adres)pointer
;--------------------------------------\
BitStream_Initialize:
	ResetStream
	ret
;--------------------------------------/


;---------------------------------------
;--- De Bitstream afbeelden op de COM: poort
;--- invoer: register X = pointer naar EndOfBitstream in buffer
;--------------------------------------\
BitStream_Display:
	;NB. X bevat de pointer naar het einde van de buffer (excl. X)
	push	YL
	push	YH
	ldi		YL, low(BitStream)			; Y := begin bitstream buffer
	ldi		YH, high(BitStream)			;
_1:	cp		YL, XL						; Y>=X?
	cpc		YH, XH						;
	brsh	_0							; ja? dan klaar..
	ld		temp, Y+					; temp := [Y],  Y++
	rcall	UART_transmit
	rjmp	_1
_0:	rcall	UART_CrLf
	pop		YH
	pop		YL
	ret
;--------------------------------------/




;---------------------------------------
;--- De Timer1 initialiseren
;--------------------------------------\
Timer_Initialize:
	; interrupts tegengaan
	clr		temp
	out		TIMSK, temp

	; De Timer1 HW-PWM uitschakelen
	clr		temp
	out		TCCR1A, temp

	;-- waarden voor TCCR1B
	; ICNC1: Noise Canceler uitschakelen => input capture om elke sample/capture. (nvt nu)
	; ICES1: Input Capture Interrupts op opgaande flank laten genereren. (nvt nu)
	; CTC1:  Clear TCNT on compareA match uitschakelen
	; CS12,CS11 & CS10: timer1clock-select instellen op CK/8 (0,1,0)
	ldi		temp, (0<<ICNC1 | 0<<ICES1 | 0<<CTC1 | 0<<CS12 | 1<<CS11 | 0<<CS10)
	out		TCCR1B, temp

	; timer1 compareA match interrupt inschakelen
	; timer1 compareB match interrupt uitschakelen
	ldi		temp, (1<<OCIE1A | 0<<OCIE1B)
	out		TIMSK, temp
	; Compare-A waarde instellen
	ldi		temp2, high(Max0)
	ldi		temp, low(Max0)
	out		OCR1AH, temp2
	out		OCR1AL, temp

	; de counter op 0 instellen
	ResetCounter
	ret
;--------------------------------------/



;---------------------------------------
;--- Timer1 CompareA match handler
;--------------------------------------\
Timer_Interrupt_CompareA:
	push	temp
	in		temp, SREG
	push	temp
;	push	XL
;	push	XH
;	push	YL
;	push	YH
;	push	ZL
;	push	ZH

	; Als deze handler wordt aangesproken houdt dat in:
	; Het signaal is al <TimeOutValue> op een 0-niveau, een tijdstip tussen 2 packets..

	; * eventueel uitvoer naar LED's en/of COM:-poort
	.ifdef Output_To_LED
		LED_On LED_Error				; Error LED aan (ongeldig)
		LED_Off LED_Bit					; Bit LED uit
	.endif
	.ifdef Output_To_COM
		ldi		temp, CHR_Timeout
		rcall	UART_transmit
		;rcall	UART_CrLf
	.endif

	; * de stream is klaar om te worden afgebeeld..
	;   buiten deze handler dan eigenlijk.. ;)
	rcall	BitStream_Display

	; * Herstel de bitsreampointer in het X-register
	ResetStream

;	pop		ZH
;	pop		ZL
;	pop		YH
;	pop		YL
;	pop		XH
;	pop		XL
	pop		temp
	out		SREG, temp
	pop		temp
	reti
;--------------------------------------/




;---------------------------------------
;--- Main Program
;--------------------------------------\
RESET:
	;-- initialisatie
	cli									; interrupts tegenhouden
	initStackPointer					; initialiseer de stack pointer
	rcall	LED_Initialize				; de LED's
	rcall	Capture_Initialize			; de signaal input pin
	rcall	BitStream_Initialize		; de bitsream ontvangst buffer
	rcall	Timer_Initialize			; de timer
	sei									; interrupts weer toelaten
	;--
main_loop:
	; het signaal op de input-pin <CapturePin> is nu onbekend.
	; in periode A of B.. of op een tijdstip tussen 2 packets
	WaitFor1							; wacht op de eerste omhooggaande flank..
	; begin Periode B
	WaitFor0							; wacht op de volgende neergaande flank..
bit_loop:
	; het signaal op de input-pin <CapturePin> is nu laag.
	; begin periode A
	ReadCounter ZL, ZH					; de timercounter uitlezen in register Z
	ResetCounter						; de counter op 0 instellen
	TestPeriode ZL, ZH					; controleer ontvangen halve bit (periode B)
	WaitFor1							; wacht op de eerste omhooggaande flank..
	; het signaal op de input-pin <CapturePin> is nu hoog.
	; begin Periode B
	ReadCounter YL, YH					; de timercounter uitlezen in register Y
	ResetCounter						; de counter op 0 instellen
	TestPeriode YL, YH					; controleer ontvangen halve bit (periode A)
	WaitFor0							; wacht op de volgende neergaande flank..
	; |Z-Y| <= 6us   is goede "1" bit ontvangen
	; |Z-Y| <= 6us   is goede "1" bit ontvangen

	rjmp 	bit_loop
;--------------------------------------/






